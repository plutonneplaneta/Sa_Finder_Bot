import os
import re
import json
import httpx
import asyncio
from pathlib import Path
from dotenv import load_dotenv
from base58 import b58decode, b58encode
from cryptography.fernet import Fernet
from solana.rpc.async_api import AsyncClient
from solders.keypair import Keypair
from solders.transaction import Transaction
from telethon import TelegramClient, events
from telegram import Bot, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
)
from telethon.sessions import StringSession

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ADD_CHANNEL, IMPORT_WALLET, SET_AMOUNT, SET_SLIPPAGE, REMOVE_CHANNEL, REMOVE_WALLET = range(6)


class UserBotManager:
    def __init__(self):
        self.client = None
        self.session_file = Path(__file__).parent / 'userbot.session'
        self.phone = os.getenv("USERBOT_PHONE")
        self.api_id = int(os.getenv("TELEGRAM_API_ID"))
        self.api_hash = os.getenv("TELEGRAM_API_HASH")
        self.password = os.getenv("USERBOT_PASSWORD")  # –ï—Å–ª–∏ –µ—Å—Ç—å 2FA

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π"""
        if self.session_file.exists():
            with open(self.session_file, 'r') as f:
                session_string = f.read().strip()
                self.client = TelegramClient(
                    StringSession(session_string),
                    self.api_id,
                    self.api_hash
                )
        else:
            self.client = TelegramClient(
                StringSession(),
                self.api_id,
                self.api_hash
            )

        try:
            await self._connect()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ UserBot: {e}")
            return False

    async def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ userbot —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        if not self.phone:
            raise ValueError("USERBOT_PHONE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env")

        await self.client.connect()

        if not await self.client.is_user_authorized():
            print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è UserBot...")
            await self.client.send_code_request(self.phone)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è 2FA
            if self.password:
                await self.client.sign_in(
                    phone=self.phone,
                    code=input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: '),
                    password=self.password
                )
            else:
                await self.client.sign_in(
                    phone=self.phone,
                    code=input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ')
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            with open(self.session_file, 'w') as f:
                f.write(self.client.session.save())

        print("UserBot —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

    async def start_monitoring(self, channels, callback):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.client:
            raise RuntimeError("UserBot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        @self.client.on(events.NewMessage(chats=channels))
        async def handler(event):
            await callback(event)

        print(f"üü¢ UserBot –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤...")
        await self.client.run_until_disconnected()

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ userbot"""
        if self.client and self.client.is_connected():
            await self.client.disconnect()


class SecureStorage:
    def __init__(self):

        key = os.getenv("ENCRYPTION_KEY")
        print(f"Raw key: {repr(key)}")
        print(f"Length: {len(key)}")
        print(f"Stripped: {repr(re.sub(r'[^a-zA-Z0-9-_]', '', key))}")
        print(f"Stripped length: {len(re.sub(r'[^a-zA-Z0-9-_]', '', key))}")
        if not key:
            raise ValueError("ENCRYPTION_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã

        key = key.strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(key) != 44:
            raise ValueError(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–ª—é—á–∞. –ù—É–∂–Ω–æ 44 —Å–∏–º–≤–æ–ª–∞, –ø–æ–ª—É—á–µ–Ω–æ {len(key)}")
        try:
            self.cipher = Fernet(key.encode('utf-8'))
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Fernet: {str(e)}")

        self.data_file = Path(__file__).parent / 'encrypted_data.json'
        self.data = {
            "wallets": {},  # –§–æ—Ä–º–∞—Ç: {"user_id": {"private_key": "...", "amount": 100000000, "slippage": 0.5}}
            "channels": {},
            "last_processed_ids": {}
        }
        self._load_data()

    def _load_data(self):
        try:
            if self.data_file.exists():
                with open(self.data_file, 'r') as f:
                    self.data = json.load(f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def save_data(self):
        try:
            with open(self.data_file, 'w') as f:
                json.dump(self.data, f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")


class SolanaTrader:
    def __init__(self):
        self.client = AsyncClient(os.getenv("SOLANA_RPC"))
        self.gmgn_api = os.getenv("GMGN_API")

    async def find_tokens(self, text: str):
        """–ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return re.findall(r'\b[1-9A-HJ-NP-Za-km-z]{32,44}\b', text)

    async def buy_token(self, private_key: str, token: str, amount: int, slippage: float):
        """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ GMGN API"""
        try:
            secret_key = b58decode(private_key)
            keypair = Keypair.from_bytes(secret_key)

            # 1. –ü–æ–ª—É—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –æ–±–º–µ–Ω–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            route = await self._get_swap_route(
                wallet_pubkey=keypair.pubkey(),
                token=token,
                amount=amount,
                slippage=slippage
            )
            # 2. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            tx = Transaction.deserialize(b58decode(route["raw_tx"]))
            tx.sign([keypair])  # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            signed_tx = b58encode(tx.serialize()).decode()

            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            async with httpx.AsyncClient() as client:
                response = await client.post(
                    f"{self.gmgn_api}/tx/send_transaction",
                    json={"signedTx": signed_tx}
                )
                return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
            raise

    async def _get_swap_route(self, wallet_pubkey, token, amount, slippage):
        params = {
            "token_in": "So11111111111111111111111111111111111111112",
            "token_out": token,
            "in_amount": str(amount),
            "from_address": str(wallet_pubkey),
            "slippage": str(slippage)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        }

        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"{self.gmgn_api}/tx/get_swap_route",
                params=params
            )
            return response.json()


class TokenHunterBot:
    def __init__(self):
        load_dotenv()
        self.bot = Bot(token=os.getenv("TELEGRAM_TOKEN"))
        self.storage = SecureStorage()
        self.trader = SolanaTrader()
        self.userbot = UserBotManager()  # –ú–µ–Ω–µ–¥–∂–µ—Ä userbot

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.app = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()
        self._setup_handlers()


    async def _start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
        if not self.storage.data["channels"]:
            print("‚ÑπÔ∏è –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._init_userbot())


    async def _init_userbot(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot –∏ –∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            success = await self.userbot.initialize()
            if not success:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å UserBot")
                return

            channels = list(self.storage.data["channels"].keys())
            await self.userbot.start_monitoring(
                channels=channels,
                callback=self._handle_channel_message
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ UserBot: {e}")


    async def _handle_channel_message(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            tokens = await self.trader.find_tokens(event.raw_text)
            for token in tokens:
                await self._process_token(event, token)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling()

            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            await self._start_background_tasks()

            print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É")
            while True:
                await asyncio.sleep(3600)
        except Exception as e:
            print(f"üî¥ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            await self.app.stop()
            await self.userbot.stop()
            raise

    def _get_main_keyboard(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        return ReplyKeyboardMarkup(
            [
                [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"), KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")],
                [KeyboardButton("üíº –ò–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫")],
                [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫—É–ø–∫–∏"), KeyboardButton("üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")],
                [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )

    def _get_settings_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        return ReplyKeyboardMarkup(
            [
                [KeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É"), KeyboardButton("üìâ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å slippage")],
                [KeyboardButton("üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é")]
            ],
            resize_keyboard=True
        )

    def _get_back_keyboard(self):
        """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
        return ReplyKeyboardMarkup(
            [[KeyboardButton("üîô –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )

    def _get_wallet_remove_keyboard(self):
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
        return ReplyKeyboardMarkup(
            [
                [KeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å"), KeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")],
            ],
            resize_keyboard=True
        )


    def _setup_handlers(self):
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        button_handlers = [
            MessageHandler(filters.Text(["‚ùì –ü–æ–º–æ—â—å"]), self._cmd_start),
            MessageHandler(filters.Text(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"]), self._cmd_add_channel),
            MessageHandler(filters.Text(["‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª"]), self._cmd_remove_channel),
            MessageHandler(filters.Text(["üíº –ò–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞"]), self._cmd_import_wallet),
            MessageHandler(filters.Text(["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫—É–ø–∫–∏"]), self._show_settings),
            MessageHandler(filters.Text(["üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã"]), self._cmd_list_channels),
            MessageHandler(filters.Text(["üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É"]), self._cmd_set_amount),
            MessageHandler(filters.Text(["üìâ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å slippage"]), self._cmd_set_slippage),
            MessageHandler(filters.Text(["üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é"]), self._back_to_main),
            MessageHandler(filters.Text(["üîô –û—Ç–º–µ–Ω–∞"]), self._back_to_main),
            MessageHandler(filters.Text(["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫"]), self._cmd_remove_wallet),
            MessageHandler(filters.Text(["‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å"]), self._confirm_remove_wallet),
            MessageHandler(filters.Text(["‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"]), self._back_to_main),
        ]

        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", self._cmd_start),
                MessageHandler(filters.Text(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"]), self._cmd_add_channel),
                MessageHandler(filters.Text(["‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª"]), self._cmd_remove_channel),
                MessageHandler(filters.Text(["üíº –ò–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞"]), self._cmd_import_wallet),
                MessageHandler(filters.Text(["üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É"]), self._cmd_set_amount),
                MessageHandler(filters.Text(["üìâ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å slippage"]), self._cmd_set_slippage),
                MessageHandler(filters.Text(["üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫"]), self._cmd_remove_wallet),
            ],
            states={
                ADD_CHANNEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_add_channel)],
                REMOVE_CHANNEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_remove_channel)],
                IMPORT_WALLET: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_import_wallet)],
                SET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_set_amount)],
                SET_SLIPPAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_set_slippage)],
                REMOVE_WALLET: [MessageHandler(filters.TEXT & ~filters.COMMAND, self._handle_remove_wallet)],
            },
            fallbacks=[
                MessageHandler(filters.Text(["üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "üîô –û—Ç–º–µ–Ω–∞"]), self._back_to_main),
            ],
            allow_reentry=True
        )

        self.app.add_handler(conv_handler)
        for handler in button_handlers:
            self.app.add_handler(handler)

    async def _cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
        await update.message.reply_text(
            "üõ† Sa_Finder_Bot\n\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞–µ—Ç –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=self._get_main_keyboard()
        )
        return ConversationHandler.END

    async def _cmd_add_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤"""
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            "–ü—Ä–∏–º–µ—Ä: @channel1, @channel2, @channel3\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞'",
            reply_markup=self._get_back_keyboard()
        )
        return ADD_CHANNEL

    async def _handle_add_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        user_id = str(update.message.from_user.id)
        text = update.message.text.strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        if text in ["üîô –ù–∞–∑–∞–¥", "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "üîô –û—Ç–º–µ–Ω–∞"]:
            await self._back_to_main(update, context)
            return ConversationHandler.END

        # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–æ–¥ –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
        channels = [ch.strip() for ch in text.split(',')]
        added_channels = []
        already_added = []
        invalid_channels = []

        for channel in channels:
            if not channel.startswith("@"):
                invalid_channels.append(channel)
                continue

            if channel not in self.storage.data["channels"]:
                self.storage.data["channels"][channel] = []

            if user_id not in self.storage.data["channels"][channel]:
                self.storage.data["channels"][channel].append(user_id)
                added_channels.append(channel)
            else:
                already_added.append(channel)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        if added_channels:
            self.storage.save_data()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = []
        if added_channels:
            response.append(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–Ω–∞–ª—ã: {', '.join(added_channels)}")
        if already_added:
            response.append(f"‚ÑπÔ∏è –£–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(already_added)}")
        if invalid_channels:
            response.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {', '.join(invalid_channels)}\n(–¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @)")

        if not added_channels and not already_added and invalid_channels:
            # –ï—Å–ª–∏ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ, –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥
            await update.message.reply_text(
                "\n".join(response),
                reply_markup=self._get_back_keyboard()
            )
            return ADD_CHANNEL
        else:
            await update.message.reply_text(
                "\n".join(response),
                reply_markup=self._get_main_keyboard()
            )
            return ConversationHandler.END

    async def _cmd_remove_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤"""
        user_id = str(update.message.from_user.id)
        user_channels = [
            channel for channel, users in self.storage.data["channels"].items()
            if user_id in users
        ]

        if not user_channels:
            await update.message.reply_text(
                "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
                reply_markup=self._get_main_keyboard()
            )
            return ConversationHandler.END

        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
            f"–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã: {', '.join(user_channels)}\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –û—Ç–º–µ–Ω–∞'",
            reply_markup=self._get_back_keyboard()
        )
        return REMOVE_CHANNEL

    async def _handle_remove_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        user_id = str(update.message.from_user.id)
        text = update.message.text.strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
        if text in ["üîô –ù–∞–∑–∞–¥", "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "üîô –û—Ç–º–µ–Ω–∞"]:
            await self._back_to_main(update, context)
            return ConversationHandler.END

        # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–æ–¥ –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –æ—á–∏—â–∞–µ–º –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
        channels = [ch.strip() for ch in text.split(',')]
        removed_channels = []
        not_found = []
        not_subscribed = []

        for channel in channels:
            if channel not in self.storage.data["channels"]:
                not_found.append(channel)
                continue

            if user_id in self.storage.data["channels"][channel]:
                self.storage.data["channels"][channel].remove(user_id)
                removed_channels.append(channel)

                # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç
                if not self.storage.data["channels"][channel]:
                    del self.storage.data["channels"][channel]
            else:
                not_subscribed.append(channel)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è
        if removed_channels:
            self.storage.save_data()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = []
        if removed_channels:
            response.append(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –∫–∞–Ω–∞–ª—ã: {', '.join(removed_channels)}")
        if not_subscribed:
            response.append(f"‚ÑπÔ∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã: {', '.join(not_subscribed)}")
        if not_found:
            response.append(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(not_found)}")

        await update.message.reply_text(
            "\n".join(response),
            reply_markup=self._get_main_keyboard()
        )
        return ConversationHandler.END

    async def _cmd_import_wallet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞"""
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ Base58:",
            reply_markup=self._get_back_keyboard()
        )
        return IMPORT_WALLET

    async def _handle_import_wallet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ—à–µ–ª—å–∫–∞"""
        user_id = str(update.message.from_user.id)
        text = update.message.text.strip()

        try:
            secret_key = b58decode(text)
            keypair = Keypair.from_bytes(secret_key)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.storage.data["wallets"][user_id] = {
                "private_key": text,
                "amount": 100000000,  # 0.1 SOL
                "slippage": 0.5  # 0.5%
            }
            self.storage.save_data()

            await update.message.reply_text(
                "‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∫—É–ø–∫–∏:",
                reply_markup=self._get_settings_keyboard()
            )
            return ConversationHandler.END
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=self._get_back_keyboard()
            )
            return IMPORT_WALLET

    async def _cmd_remove_wallet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
        user_id = str(update.message.from_user.id)

        if user_id not in self.storage.data["wallets"]:
            await update.message.reply_text(
                "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞",
                reply_markup=self._get_main_keyboard()
            )
            return ConversationHandler.END

        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫?\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=self._get_wallet_remove_keyboard()
        )
        return REMOVE_WALLET

    async def _confirm_remove_wallet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞"""
        user_id = str(update.message.from_user.id)

        if user_id in self.storage.data["wallets"]:
            del self.storage.data["wallets"][user_id]
            self.storage.save_data()

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
            for channel in list(self.storage.data["channels"].keys()):
                if user_id in self.storage.data["channels"][channel]:
                    self.storage.data["channels"][channel].remove(user_id)

                    # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç
                    if not self.storage.data["channels"][channel]:
                        del self.storage.data["channels"][channel]

            self.storage.save_data()

            await update.message.reply_text(
                "‚úÖ –ö–æ—à–µ–ª–µ–∫ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
                reply_markup=self._get_main_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è –ö–æ—à–µ–ª–µ–∫ —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω",
                reply_markup=self._get_main_keyboard()
            )

        return ConversationHandler.END

    async def _handle_remove_wallet(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞"""
        text = update.message.text.lower().strip()

        if text in ["–¥–∞", "—É–¥–∞–ª–∏—Ç—å", "yes", "delete"]:
            return await self._confirm_remove_wallet(update, context)
        else:
            await update.message.reply_text(
                "–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=self._get_main_keyboard()
            )
            return ConversationHandler.END



    async def _show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        user_id = str(update.message.from_user.id)

        if user_id not in self.storage.data["wallets"]:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ—à–µ–ª–µ–∫!",
                reply_markup=self._get_main_keyboard()
            )
            return

        wallet = self.storage.data["wallets"][user_id]
        await update.message.reply_text(
            f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"üí∞ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: {wallet['amount']} lamports (~{wallet['amount'] / 1000000000:.4f} SOL)\n"
            f"üìâ –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {wallet['slippage']}%\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=self._get_settings_keyboard()
        )

    async def _cmd_set_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏"""
        user_id = str(update.message.from_user.id)

        if user_id not in self.storage.data["wallets"]:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ—à–µ–ª–µ–∫!",
                reply_markup=self._get_main_keyboard()
            )
            return ConversationHandler.END

        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ lamports (1 SOL = 1,000,000,000 lamports):\n\n"
            "–ü—Ä–∏–º–µ—Ä: 100000000 = 0.1 SOL",
            reply_markup=self._get_back_keyboard()
        )
        return SET_AMOUNT

    async def _handle_set_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—É–º–º—ã"""
        user_id = str(update.message.from_user.id)
        text = update.message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if text in ["üîô –ù–∞–∑–∞–¥", "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "üîô –û—Ç–º–µ–Ω–∞"]:
            await self._back_to_main(update, context)
            return ConversationHandler.END

        try:
            amount = int(text)
            if amount <= 0:
                raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

            self.storage.data["wallets"][user_id]["amount"] = amount
            self.storage.save_data()

            await update.message.reply_text(
                f"‚úÖ –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {amount} lamports (~{amount / 1000000000:.4f} SOL)\n\n"
                "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=self._get_settings_keyboard()
            )
            return ConversationHandler.END
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=self._get_back_keyboard()
            )
            return SET_AMOUNT

    async def _cmd_set_slippage(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ slippage"""
        user_id = str(update.message.from_user.id)

        if user_id not in self.storage.data["wallets"]:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ—à–µ–ª–µ–∫!",
                reply_markup=self._get_main_keyboard()
            )
            return ConversationHandler.END

        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è (0.1-50%):\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 0.5-2%",
            reply_markup=self._get_back_keyboard()
        )
        return SET_SLIPPAGE

    async def _handle_set_slippage(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ slippage"""
        user_id = str(update.message.from_user.id)
        text = update.message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞—Ç–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if text in ["üîô –ù–∞–∑–∞–¥", "üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é", "üîô –û—Ç–º–µ–Ω–∞"]:
            await self._back_to_main(update, context)
            return ConversationHandler.END

        try:
            slippage = float(text)
            if slippage < 0.1 or slippage > 50:
                raise ValueError("–î–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0.1-50%")

            self.storage.data["wallets"][user_id]["slippage"] = slippage
            self.storage.save_data()

            await update.message.reply_text(
                f"‚úÖ –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {slippage}%\n\n"
                "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=self._get_settings_keyboard()
            )
            return ConversationHandler.END
        except ValueError as e:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=self._get_back_keyboard()
            )
            return SET_SLIPPAGE

    async def _cmd_list_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        user_id = str(update.message.from_user.id)
        user_channels = [
            channel for channel, users in self.storage.data["channels"].items()
            if user_id in users
        ]

        if not user_channels:
            await update.message.reply_text(
                "‚ÑπÔ∏è –í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞",
                reply_markup=self._get_main_keyboard()
            )
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        message = "üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n\n" + "\n".join(
            f"{i + 1}. {channel}" for i, channel in enumerate(user_channels)
        )

        await update.message.reply_text(
            message,
            reply_markup=self._get_main_keyboard()
        )

    async def _back_to_main(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=self._get_main_keyboard()
        )
        return ConversationHandler.END

    async def _process_token(self, event, token):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        try:
            channel = f"@{event.chat.username}" if event.chat.username else event.chat.title
            message_link = f"https://t.me/c/{event.chat.id}/{event.id}"

            for user_id in self.storage.data["channels"].get(channel, []):
                if user_id in self.storage.data["wallets"]:
                    wallet = self.storage.data["wallets"][user_id]

                    try:
                        result = await self.trader.buy_token(
                            private_key=wallet["private_key"],
                            token=token,
                            amount=wallet["amount"],
                            slippage=wallet["slippage"]
                        )

                        await self.bot.send_message(
                            chat_id=user_id,
                            text=f"‚úÖ –¢–æ–∫–µ–Ω –∫—É–ø–ª–µ–Ω!\n\n"
                                 f"‚ñ™Ô∏è –¢–æ–∫–µ–Ω: {token}\n"
                                 f"‚ñ™Ô∏è –ö–∞–Ω–∞–ª: {channel}\n"
                                 f"‚ñ™Ô∏è –°—É–º–º–∞: {wallet['amount'] / 1000000000:.4f} SOL\n"
                                 f"‚ñ™Ô∏è Slippage: {wallet['slippage']}%\n"
                                 f"‚ñ™Ô∏è TX: {result.get('hash', 'N/A')}\n"
                                 f"üîó {message_link}",
                            reply_markup=self._get_main_keyboard()
                        )
                    except Exception as e:
                        await self.bot.send_message(
                            chat_id=user_id,
                            text=f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ {token}:\n{str(e)}",
                            reply_markup=self._get_main_keyboard()
                        )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")

async def main():
    required_vars = [
        "TELEGRAM_TOKEN",
        "TELEGRAM_API_ID",
        "TELEGRAM_API_HASH",
        "SOLANA_RPC",
        "GMGN_API"
    ]

    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return

    if not os.getenv("ENCRYPTION_KEY"):
        print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: ENCRYPTION_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
        print("–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª—é—á –∫–æ–º–∞–Ω–¥–æ–π:")
        print("python -c 'from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())'")

    try:
        bot = TokenHunterBot()
        await bot.run()
    except Exception as e:
        print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())
